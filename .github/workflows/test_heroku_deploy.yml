on: [push, pull_request]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

name: Test & Heroku Deployment & Docker
jobs:
  test:
    strategy:
      matrix:
        go-version: [1.20.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: setup
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: checkout
        uses: actions/checkout@v3
      - name: caching
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~\AppData\Local\go-build
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      - run: go test -v ./...
  heroku:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "ethkeygen"
          heroku_email: "jsie@fairhive-labs.com"
          healthcheck: "https://ethkeygen.herokuapp.com/health"
          checkstring: "ok"
          delay: 5
          rollbackonhealthcheckfailed: true
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: _github
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Heroku Deployment - ethkeygen
          SLACK_MESSAGE: "https://ethkeygen.herokuapp.com/"
          SLACK_USERNAME: _whyvrafvr
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  
  docker:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=raw,value=latest,enable=${{ endsWith(GitHub.ref, 'master') }}
            type=raw,event=branch,value={{branch}}
            type=semver,pattern={{raw}}
            type=sha,format=long
      - name: Build and push Docker image
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
